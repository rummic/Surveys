// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surveys.DataAccess;

namespace Surveys.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Surveys.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14c2d0fb-3ef3-4ecf-8ea2-9cef40447fb7"),
                            AnswerType = 0,
                            Text = "What is your company size?"
                        },
                        new
                        {
                            Id = new Guid("30e01f7a-7a75-41ee-bd15-60988f7a3313"),
                            AnswerType = 0,
                            Text = "What is your IT team size (if any)?"
                        },
                        new
                        {
                            Id = new Guid("f67f87af-3bd2-4bb9-9c00-519a44a110a3"),
                            AnswerType = 0,
                            Text = "What is your growth ambition?"
                        },
                        new
                        {
                            Id = new Guid("51e2951b-df94-409f-a730-0d2b4b6a59f2"),
                            AnswerType = 0,
                            Text = "Do you own/maintain your own IT?"
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fa77e5a-edff-4b82-bbea-f2233cc34c88"),
                            CreatorEmail = "john@john.com",
                            Name = "Main Survey"
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb90875-f14c-4b90-a5b0-f6d9bf6aa39f"),
                            QuestionId = new Guid("14c2d0fb-3ef3-4ecf-8ea2-9cef40447fb7"),
                            SurveyId = new Guid("1fa77e5a-edff-4b82-bbea-f2233cc34c88")
                        },
                        new
                        {
                            Id = new Guid("51e773c9-aa9a-4c5d-a05c-eaa4b44eb1fc"),
                            QuestionId = new Guid("30e01f7a-7a75-41ee-bd15-60988f7a3313"),
                            SurveyId = new Guid("1fa77e5a-edff-4b82-bbea-f2233cc34c88")
                        },
                        new
                        {
                            Id = new Guid("c44a8d02-1d2b-41a9-80ed-f133f7c8d39b"),
                            QuestionId = new Guid("f67f87af-3bd2-4bb9-9c00-519a44a110a3"),
                            SurveyId = new Guid("1fa77e5a-edff-4b82-bbea-f2233cc34c88")
                        },
                        new
                        {
                            Id = new Guid("22517fb4-23a7-4b27-92cf-05498da0fb03"),
                            QuestionId = new Guid("51e2951b-df94-409f-a730-0d2b4b6a59f2"),
                            SurveyId = new Guid("1fa77e5a-edff-4b82-bbea-f2233cc34c88")
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestionAnswers");
                });

            modelBuilder.Entity("Surveys.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1db141e-da43-462f-961a-d89a834983fa"),
                            Email = "john@john.com",
                            Name = "John",
                            Password = new byte[] { 170, 149, 246, 231, 104, 39, 0, 227, 245, 61, 14, 132, 233, 180, 216, 24, 213, 225, 232, 126, 101, 119, 44, 240, 216, 192, 200, 31, 156, 67, 99, 41 },
                            Role = "Admin",
                            Salt = new byte[] { 101, 97, 155, 140, 8, 254, 33, 192, 53, 185, 85, 83, 2, 138, 87, 253, 187, 29, 241, 64, 135, 22, 201, 10, 105, 18, 109, 1, 253, 73 }
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Surveys.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("Surveys.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestionAnswer", b =>
                {
                    b.HasOne("Surveys.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId");

                    b.HasOne("Surveys.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
