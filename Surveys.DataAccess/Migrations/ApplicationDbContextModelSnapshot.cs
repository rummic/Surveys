// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Surveys.DataAccess;

namespace Surveys.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Surveys.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3dc99bb-3cc2-4cc8-9289-7a82daa32f8b"),
                            Text = "What is your company size?"
                        },
                        new
                        {
                            Id = new Guid("ca5e5523-3e9a-4712-a900-74a167895487"),
                            Text = "What is your IT team size (if any)?"
                        },
                        new
                        {
                            Id = new Guid("20fc4144-61ec-4561-b322-f1730adb80f6"),
                            Text = "What is your growth ambition?"
                        },
                        new
                        {
                            Id = new Guid("1ec6e5b9-cc4e-40ad-bfb5-733280df65f7"),
                            Text = "Do you own/maintain your own IT?"
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ea9bbf-af38-4d52-b570-c1fd60042f57"),
                            CreatorEmail = "john@john.com",
                            Name = "Main Survey"
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c54220c-f910-481a-9157-d5923bb01ff5"),
                            QuestionId = new Guid("b3dc99bb-3cc2-4cc8-9289-7a82daa32f8b"),
                            SurveyId = new Guid("06ea9bbf-af38-4d52-b570-c1fd60042f57")
                        },
                        new
                        {
                            Id = new Guid("68d6a3c1-be2d-4a7b-a51a-d2a0adf028de"),
                            QuestionId = new Guid("ca5e5523-3e9a-4712-a900-74a167895487"),
                            SurveyId = new Guid("06ea9bbf-af38-4d52-b570-c1fd60042f57")
                        },
                        new
                        {
                            Id = new Guid("53d2cb10-5388-4fef-a45f-ec49ad962a11"),
                            QuestionId = new Guid("20fc4144-61ec-4561-b322-f1730adb80f6"),
                            SurveyId = new Guid("06ea9bbf-af38-4d52-b570-c1fd60042f57")
                        },
                        new
                        {
                            Id = new Guid("20e3c921-fad3-43d8-b28f-1a16b0d77662"),
                            QuestionId = new Guid("1ec6e5b9-cc4e-40ad-bfb5-733280df65f7"),
                            SurveyId = new Guid("06ea9bbf-af38-4d52-b570-c1fd60042f57")
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnswerType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SurveyQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestionAnswers");
                });

            modelBuilder.Entity("Surveys.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6418729-897d-44d1-b353-9cd1d83d1709"),
                            Email = "john@john.com",
                            Name = "John",
                            Password = new byte[] { 57, 146, 187, 206, 203, 10, 69, 3, 122, 169, 255, 93, 30, 13, 153, 99, 154, 177, 152, 37, 34, 98, 98, 86, 220, 93, 54, 231, 124, 30, 229, 67 },
                            Role = "Admin",
                            Salt = new byte[] { 161, 124, 253, 120, 4, 245, 161, 124, 67, 155, 41, 134, 127, 29, 170, 113, 108, 20, 20, 220, 127, 13, 113, 167, 54, 219, 47, 202, 47, 164 }
                        });
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("Surveys.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("Surveys.Domain.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Surveys.Domain.Entities.SurveyQuestionAnswer", b =>
                {
                    b.HasOne("Surveys.Domain.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId");

                    b.HasOne("Surveys.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
